// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/05/CPU.hdl

/**
 * The Hack CPU (Central Processing unit), consisting of an ALU,
 * two registers named A and D, and a program counter named PC.
 * The CPU is designed to fetch and execute instructions written in 
 * the Hack machine language. In particular, functions as follows:
 * Executes the inputted instruction according to the Hack machine 
 * language specification. The D and A in the language specification
 * refer to CPU-resident registers, while M refers to the external
 * memory location addressed by A, i.e. to Memory[A]. The inM input 
 * holds the value of this location. If the current instruction needs 
 * to write a value to M, the value is placed in outM, the address 
 * of the target location is placed in the addressM output, and the 
 * writeM control bit is asserted. (When writeM==0, any value may 
 * appear in outM). The outM and writeM outputs are combinational: 
 * they are affected instantaneously by the execution of the current 
 * instruction. The addressM and pc outputs are clocked: although they 
 * are affected by the execution of the current instruction, they commit 
 * to their new values only in the next time step. If reset==1 then the 
 * CPU jumps to address 0 (i.e. pc is set to 0 in next time step) rather 
 * than to the address resulting from executing the current instruction. 
 */

CHIP CpuMul {

    IN  inM[16],         // M value input  (M = contents of RAM[A])
        instruction[16], // Instruction for execution
        reset;           // Signals whether to re-start the current
                         // program (reset==1) or continue executing
                         // the current program (reset==0).

    OUT outM[16],        // M value output
        writeM,          // Write to M? 
        addressM[15],    // Address in data memory (of M)
        pc[15];          // address of next instruction

    PARTS:
                // the part that takes care of the a register
        Mux16(a=instruction, b=lastOutput, sel=instruction[15], out=CorA);
        And(a=instruction[15], b=instruction[5], out=CinstloadA);
        Not(in=instruction[15], out=isAinst);
        Xor(a=isAinst, b=CinstloadA, out=loadA);
        ARegister(in=CorA, load=loadA, out[0..14]=addressM, out=Aregister);

        // the mux part between A or M
        
        Mux16(a=Aregister, b=inM, sel=instruction[12], out=AorM);

        // the D registeer
        And(a=instruction[15], b=instruction[4], out=isCloadD);
        DRegister(in=lastOutput, load=isCloadD, out=Dreg);
       
        // the JMP conditions
		 
        Not(in=isNegative, out=notNegative);
		Not(in=isZero, out=notZero);
        And(a=notNegative, b=notZero, out=isPositive);
        Not(in=isPositive, out=notPositive);
        Mux8Way(sel=instruction[0..2], out=Jump, a=false, b=isPositive,
				c=isZero, d=notNegative, e=isNegative, f=notZero,
				 g=notPositive, h=true);
        And(a=instruction[15], b=Jump, out=isCandJump);
        Not(in=isCandJump, out=DontJump);
        PC(in=Aregister, load=isCandJump, inc=DontJump, reset=reset,
			out[0..14]=pc);
        
        //writreM
        And(a=instruction[15], b=instruction[3], out=writeM);

        // ALU
         ExtendAlu(x=Dreg, y=AorM, instruction=instruction[6..14],
            out=lastOutput , out=outM, zr=isZero, ng=isNegative);
}