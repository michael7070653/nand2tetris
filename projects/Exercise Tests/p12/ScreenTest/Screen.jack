// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/12/Screen.jack

/**
 * A library of functions for displaying graphics on the screen.
 * The Hack physical screen consists of 512 rows (indexed 0..511, top to bottom)
 * of 256 pixels each (indexed 0..255, left to right). The top left pixel on 
 * the screen is indexed (0,0).
 */
class Screen {
    static Array screen;
    static boolean color;

    /** Initializes the Screen. */
    function void init() {
        let screen = 16384;
        let color = true; // true is black, false is white
        return;
    }

    /** Erases the entire screen. */
    function void clearScreen() {
        var int i;
        let i = 0;
        while (i < 8192)
        {
            let screen[i] = false;
        }
        return;
    }

    /** Sets the current color, to be used for all subsequent drawXXX commands.
     *  Black is represented by true, white by false. */
    function void setColor(boolean b) {
        let color = b;
        return;
    }

    /** Draws the (x,y) pixel, using the current color. */
    function void drawPixel(int x, int y) {
        var int address;
		var int mask;

		let address = (y * 32) + (x / 16);
		let mask = Math.two_to_the(x & 15);

		if (color) {
			let screen[address] = screen[address] | mask;
		}
		else {
			let screen[address] = screen[address] & ~mask;
		}
		return;
	}


    /** Draws a line from pixel (x1,y1) to pixel (x2,y2), using the current color. */
    function void drawLine(int x1, int y1, int x2, int y2) {
        var int x, y, dx, dy;
        let x = x1;
        let y = y1;
        let dx = x2 - x1;
        let dy = y2 - y1;
        if ((x2 > x1) & (y2 > y1)){
            while ((x < x2) & (y < y2)){
                do Screen.drawPixel(x, y);
                if ((y/x) > (dy/dx)){
                let x = x + 1;}
                else{let y = y + 1;}
            }
        }
        if ((x2 < x1) & (y2 > y1)){
            while ((x > x2) & (y < y2)){
                do Screen.drawPixel(x, y);
                if ((y/x) > (dy/dx)){let x = x - 1;}
                else{let y = y + 1;}
            }
        }
        if ((x2 < x1) & (y2 < y1)){
            while ((x > x2) & (y > y2)){
                do Screen.drawPixel(x, y);
                if((y/x)>(dy/dx)){let x = x - 1;}
                else{let y = y - 1;}
            }
        }
        if ((x2 > x1) & (y2 < y1)){
            while ((x < x2) & (y > y2)){
                do Screen.drawPixel(x, y);
                if((y/x)<(dy/dx)){let y = y - 1;}
                else{let x = x + 1;}
            }
        }
        if ((x2 > x1) | (x1 > x2)){
            let x = Math.max(x1, x2);
            let dx = Math.min(x1, x2);
            while (x < dx){
                do Screen.drawPixel(x, y);
                let x = x + 1;
            }
        }
        if ((y2 > y1) | (y1 > y2)){
            let y = Math.max(y1, y2);
            let dx = Math.min (y1, y2);
            while (y < dx){
                do Screen.drawPixel(x, y);
                let y = y + 1;
            }
        }
        return;
    }

    /** Draws a filled rectangle whose top left corner is (x1, y1)
     * and bottom right corner is (x2,y2), using the current color. */
    function void drawRectangle(int x1, int y1, int x2, int y2)
    {
        var int y;
        let y = y1;

        while (y<y2)
        {
            do Screen.drawLine(x1, y, x2, y);
            let y = y + 1;
        }
        return;
    }

    /** Draws a filled circle of radius r<=181 around (x,y), using the current color. */
    function void drawCircle(int x, int y, int r) {
        var int i;
        let i = 2 * r;
        while (i > 0){
            drawLine(Math.sqrt(x-i), Math.sqrt(y+i), Math.sqrt(x+i), Math.sqrt(y-i));
            let i = i - 1;
        }
        return;
    }
}
