// This file is part of nand2tetris, as taught in The Hebrew University, and
// was written by Aviv Yaish. It is an extension to the specifications given
// [here](https://www.nand2tetris.org) (Shimon Schocken and Noam Nisan, 2017),
// as allowed by the Creative Common Attribution-NonCommercial-ShareAlike 3.0
// Unported [License](https://creativecommons.org/licenses/by-nc-sa/3.0/).

// This chip is an extension of the regular CPU that uses the extended ALU.
// If instruction[15]==0 or (instruction[14]==1 and instruction[13]==1),
// then CpuMul behaves exactly the same as the regular CPU.
// If instruction[15]==1 and instruction[14]==0 the chip will behave as follows:
// | Instruction           | 15 | 14 | 13 | a | c1 | c2 | c3 | c4 | c5 | c6 |
// |-----------------------|:--:|:--:|:--:|:-:|:--:|:--:|:--:|:--:|:--:|:--:|
// | Regular a-instruction |  0 |  * |  * | * |  * |  * |  * |  * |  * |  * |
// | Regular c-instruction |  1 |  1 |  1 | * |  * |  * |  * |  * |  * |  * |
// | dest=A<<;jump         |  1 |  0 |  1 | 0 |  1 |  0 |  0 |  0 |  0 |  0 |
// | dest=D<<;jump         |  1 |  0 |  1 | 0 |  1 |  1 |  0 |  0 |  0 |  0 |
// | dest=M<<;jump         |  1 |  0 |  1 | 1 |  1 |  0 |  0 |  0 |  0 |  0 |
// | dest=A>>;jump         |  1 |  0 |  1 | 0 |  0 |  0 |  0 |  0 |  0 |  0 |
// | dest=D>>;jump         |  1 |  0 |  1 | 0 |  0 |  1 |  0 |  0 |  0 |  0 |
// | dest=M>>;jump          |  1 |  0 |  1 | 1 |  0 |  0 |  0 |  0 |  0 |  0 |
// Where:
// - "<<" is a left shift, and ">>" is a right shift, as defined in project 2.
//   These notations were chosen because they are used in real programming
//   languages.
// - dest and jump can take the same values as in the regular CPU.

CHIP CpuMul {
    IN  
        inM[16],         // M value input  (M = contents of RAM[A])
        instruction[16], // Instruction for execution
        reset;           // Signals whether to re-start the current
                         // program (reset=1) or continue executing
                         // the current program (reset=0).
    OUT 
        outM[16],        // M value output
        writeM,          // Write into M? 
        addressM[15],    // Address in data memory (of M)
        pc[15];          // address of next instruction
    
    PARTS:
    // Put your code here:
    // Multiplexer to select between the output of the A register and the input M based on AorM
     Mux16(a=instruction, b=outAlu, sel=instruction[15], out=outMuxRegA);

    // Invert the MSB of the instruction
    Not(in=instruction[15], out=aInstruction);

    // Logical OR between the inverted MSB of the instruction and bit 5 of the instruction
    Or(a=aInstruction, b=instruction[5], out=loada);

    // A register to store the output of the multiplexer, loaded based on the result of the OR gate
    ARegister(in=outMuxRegA, load=loada, out=outRegA, out[0..14]=addressM);

    // Logical AND between bit 12 and the MSB of the instruction to determine A or M selection
    And(a=instruction[12], b=instruction[15], out=AorM);

    // Multiplexer to select between the output of the A register and the input M based on AorM
    Mux16(a=outRegA, b=inM, sel = AorM, out=outToAluY);

    // Logical AND between the MSB and bit 4 of the instruction to determine D register load
    And(a=instruction[15],b=instruction[4],out=Dload);
    
    // D register to store the output of the ALU, loaded based on the result of the AND gate
    DRegister(in=outAlu, load=Dload, out=outDregister);

    // ALU to perform arithmetic and logic operations based on the instruction bits
    ExtendAlu(x=outDregister , y = outToAluY,instruction = instruction[6..14] , 
    out =outM , out = outAlu, zr =zr, ng =ng);
     
    // Logical AND between bit 3 and the MSB of the instruction to determine memory write
    And(a=instruction[3], b=instruction[15], out=writeM);


    //logical AND of the reset signal with itself (essentially a pass-through)
    And(a=reset, b=reset, out=outRes);

    // Invert the negative flag from the ALU to determine if the ALU output is non-negative
    Not(in=ng, out=notng);///if outalu>=0 so !ng = 1
    // Invert the zero flag from the ALU to determine if the ALU output is non-zero
    Not(in=zr, out=notzr);///if outalu!=0 so !zr = 1


    ////>0
    // Logical AND between the negative and zero flags to determine if the ALU output is zero
    And(a=notng, b=notzr, out=bigZero);
    And(a=bigZero, b=instruction[0], out=jumpBigzero);

    /////==0
    // Logical AND between the zero flag and bit 0 of the instruction to determine if the ALU output is zero
    And(a=zr, b=instruction[1], out=jumpEqzero);

    //////<0
    // Logical AND between the negative flag and bit 2 of the instruction to determine if the ALU output is negative
    And(a=instruction[2], b=ng, out=jumpleszero);

    // Logical OR between the jump conditions to determine if a jump should occur
    Or(a=jumpBigzero, b=jumpleszero, out=s1);
    Or(a=s1, b=jumpEqzero, out=s2);

    // Logical AND between the MSB and bit 1 of the instruction to determine if a jump should occur
    And(a=s2, b=instruction[15], out=s3);
    
    // Program counter to store the address of the next instruction
    PC(in=outRegA, load=s3, inc=true, reset=reset, out[0..14]=pc);
}
