// This file is part of nand2tetris, as taught in The Hebrew University, and
// was written by Aviv Yaish. It is an extension to the specifications given
// [here](https://www.nand2tetris.org) (Shimon Schocken and Noam Nisan, 2017),
// as allowed by the Creative Common Attribution-NonCommercial-ShareAlike 3.0
// Unported [License](https://creativecommons.org/licenses/by-nc-sa/3.0/).


// The ExtendAlu chip is an extension of the standard ALU which also supports
// shift operations.
// The inputs of the extended ALU are instruction[9], x[16], y[16].
// The "ng" and "zr" output pins behave the same as in the regular ALU.
// The "out" output is defined as follows:
// If instruction[8]=1 and instruction[7]=1 the output is identical to the 
// regular ALU, where:
// instruction[5]=zx, instruction[4]=nx, ..., instruction[0]=no
// Else, if instruction[8]=0 and instruction[7]=1, the output is a shift:
// - If instruction[4] == 0, the input "y" will be shifted, otherwise "x".
// - If instruction[5] == 0, the shift will be a right-shift, otherwise left.
// - All other inputs are undefined.

CHIP ExtendAlu {
     IN x[16], y[16], instruction[9];
     OUT out[16], zr, ng;
     
     PARTS:
     // Put your code here:
     // ALU
     ALU(x=x, y=y, zx=instruction[5], nx=instruction[4], zy=instruction[3],
      ny=instruction[2], f=instruction[1], no=instruction[0], out=outalu, zr=zrAlu, ng=ngAlu);

     //shifts
     ShiftRight(in=x, out=shiftRx);
     ShiftRight(in=y, out=shiftRy);
     ShiftLeft(in=x , out=shiftLx);
     ShiftLeft(in=y , out=shiftLy);

     // Mux4Way16
     Mux4Way16(a=shiftRy, b=shiftRx, c=shiftLy, d=shiftLx,
     sel=instruction[4..5],out[0..7] = outs1, out[8..15] = outs2, out[15] = isneg , out=shifted);
     /////is shift == 0??
     Or8Way(in=outs1, out=or1);
     Or8Way(in=outs2, out=or2);
     Or(a=or1, b=or2, out=outzeroshift);
     Not(in=outzeroshift, out=zeros);

     /////alu or shift??
     And(a=instruction[8], b=instruction[7], out=aluOrshift);
     ///<0??
     And(a=isneg, b=true, out=leszeroshift);
     /////out zr
     Mux(a=zeros, b=zrAlu, sel=aluOrshift, out=zr);

     /////out ng
     Mux(a=leszeroshift, b=ngAlu, sel=aluOrshift, out=ng);

     ///out
     Mux16(a=shifted, b=outalu, sel=aluOrshift, out=out);
}
