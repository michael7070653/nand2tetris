// This file is part of nand2tetris, as taught in The Hebrew University, and
// was written by Aviv Yaish. It is an extension to the specifications given
// [here](https://www.nand2tetris.org) (Shimon Schocken and Noam Nisan, 2017),
// as allowed by the Creative Common Attribution-NonCommercial-ShareAlike 3.0
// Unported [License](https://creativecommons.org/licenses/by-nc-sa/3.0/).
// File name: projects/12/Memory.jack

/**
 * This library provides two services: direct access to the computer's main
 * memory (RAM), and allocation and recycling of memory blocks. The Hack RAM
 * consists of 32,768 words, each holding a 16-bit binary number.
 */
class Memory {
    /** Initializes the class. */
    static Array ram;

    static Array heap,freeList,freeListLength,freeEnd;

    function void init() {
        // Pseudocode:
        // 1. freeList = heapBase
        // 2. freeList.length = heapLength
        // 3. freeList.next = null
        let ram = 0;
        let heap = 2048; // heapBase
        let freeList = 2048; // freeList
        let heap[0] = 0; //next
        let heap[1] = 16384 - 2048; //heapLength need to chek
        let freeEnd = freeList;
        return;
    }



    function int bestFit(int size){
        // Pseudocode:
        // 1. Search freeList using best-fit or first-fit heuristics to obtain
        //size + 2 need to be <= from segment.length because we need to add 2 for the size and next
        // if no such segment is found, return -1.
        // after found segment who fit we need to remove it from the freeList and update the freeList
        // we need to return the prev node from the segment that we found
        // because we need to update the next of the prev node to the next of the segment that we found





        var int prevNode, returnBlock, returnBlockSize, segmentLength;
        var Array runBlock;
        let returnBlock = -1; // now we have not found any segment that fit
        let returnBlockSize = 16384 - 2048; // max size so i want to find the samller one who fit
        let runBlock = freeList;
        let prevNode = 0;

        while(~(runBlock = 0)){
            let segmentLength = runBlock[1];// the length of the segment
            if(~(segmentLength < (size + 2))){
                if(~(segmentLength  > returnBlockSize)){ // found a segment that fit
                    let returnBlock = prevNode;
                    let returnBlockSize = segmentLength; }
            }
            let prevNode = runBlock; // now the prev node is the runBlock
            let runBlock = runBlock[0]; //next
        }
        return returnBlock; // return the prev block for the best fit.
    }




    function int reallocateFreeList(int prevNode, int length){
        var int nextNode, len;
        if (prevNode = 0){
            let nextNode = freeList; //  return block is the first block in the freeList
            let len = freeList[1]; // the old length
            let nextNode[1] = length - 2; // the new length of the block
            let freeList = freeList + length; // the freeList firs block
            let freeList[1] = len - length;// the new length of the freeList first block
            let freeEnd = freeList; //todo: put the end of the list in the start of the list if the list is empty in len 1
            return nextNode; // return the new block
        }


        else{
            let nextNode = prevNode[0];
            let len = nextNode[1]; // the len of the free block

            if(len >length){// so we have more place then we need so we return just the part that we need
            //and updeat the len of the next node to nextNode[1] - length and return the nextNode
                let nextNode[1] = nextNode[1] - length; // the new length of the next node
                let nextNode = nextNode + len + 2 - length ; // the return new alocatet block
                let nextNode[1] = length - 2; // update the length of the new allocated block
                let nextNode[0] = 0;
                return nextNode;
                }
            else{ // we need to cut the all segment
                let prevNode[0] = nextNode[0];}
            }
            return nextNode;
        }




        ///if (len > length) {
        // Split the block
        //let allocatedBlock = nextNode;          // Save base address of allocated block
        //let nextNode = nextNode + length;       // Remaining block starts after allocated block
        //let nextNode[0] = allocatedBlock[0];    // Inherit the `next` pointer from the original block
        //let nextNode[1] = len - length;         // Update length of the remaining free block
        //let prevNode[0] = nextNode;             // Ensure prevNode points to the remaining free block
        //let allocatedBlock[1] = length - 2;     // Update length of the allocated block
        //return allocatedBlock;                 // Return the base address of the allocated block
        //} else {
        // Allocate the entire block
        //let allocatedBlock = nextNode;         // Save base address of the allocated block
        //let prevNode[0] = nextNode[0];         // Skip the block in the free list
        //return allocatedBlock;                 // Return the base address of the allocated block
        //}






    /** Returns the RAM value at the given address. */
    function int peek(int address) {
        return ram[address];
    }

    /** Sets the RAM value at the given address to the given value. */
    function void poke(int address, int value) {
        let ram[address] = value;
        return;
    }

    /** Finds an available RAM block of the given size and returns
     *  a reference to its base address. Assume size > 0. */
    function int alloc(int size) {
        // Pseudocode:
        // 1. Search freeList using best-fit or first-fit heuristics to obtain
        //    a segment with segment.length > size.
        //    If no such segment is found, return -1.
        // 2. block = needed part of the found segment (or all of it, if the
        //            segment remainder is too small).
        // 3. block[-1] = size + 1 // Remember block size, for de-allocation
        // 4. Update freeList to reflect the allocation
        // 5. Return block
        // The figure MemoryTest/MemoryFreeListExample.png illustrates how
        // the freeList should look like.
        var int prevBlock, returnBlock;
        let prevBlock = Memory.bestFit(size);
        if(prevBlock = -1){
            return -1;
        }
        let returnBlock = Memory.reallocateFreeList(prevBlock, size + 2);
        let returnBlock[1] = size;
        return returnBlock + 2; /// check if it return the right address
    }

    /** De-allocates the given object (cast as an array) by making
     *  it available for future allocations. */
    function void deAlloc(Array obj) {
        // Pseudocode:
        // 1. segment = obj - 1
        // 2. Insert segment into the freeList
        var int addBlock;
        do Output.println();
        do Output.printInt(freeEnd);
        do Output.println();
        do Output.printInt(freeEnd[0]);
        do Output.println();
        let addBlock = obj - 2; // the adderes of the blcock next
        let freeEnd[0] = addBlock;
        let addBlock[0] = 0; // the last block in the freeList
        do Output.printInt(freeEnd[0]);
        return;
    }

    /** Returns the maximal element contained in the given Array/object.
     *  Assume inputs are initialized and contain at least one element. */
    function int max(Array o) {
        // Hint: the algorithm you need to implement in Memory.alloc saves the
        // size of the allocated block in the memory cell right before the
        // start of the block, and this can be used to implement Memory.max.
        var int run, max, len;
        let run = o;
        let max = o[0];
        let len = o[o -1]; // size of the array
        while(run < len){
            if(o[run] > max){
                let max = o[run];
            }
            let run = run + 1;
        }
        return max;
    }
    ///// chcek if it return the right value can be problem with the run and the max if the array is not full
}
