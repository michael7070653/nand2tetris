// This file is part of nand2tetris, as taught in The Hebrew University, and
// was written by Aviv Yaish. It is an extension to the specifications given
// [here](https://www.nand2tetris.org) (Shimon Schocken and Noam Nisan, 2017),
// as allowed by the Creative Common Attribution-NonCommercial-ShareAlike 3.0
// Unported [License](https://creativecommons.org/licenses/by-nc-sa/3.0/).

/**
 * A library of commonly used mathematical functions.
 * Note: Jack compilers implement multiplication and division using OS method calls.
 */
class Math {
        /** Initializes the library. */
        static Array bitArray;
        function void init(){
            let bitArray = Array.new(16);
            let bitArray[0] = 1;
            let bitArray[1] = 2;
            let bitArray[2] = 4;
            let bitArray[3] = 8;
            let bitArray[4] = 16;
            let bitArray[5] = 32;
            let bitArray[6] = 64;
            let bitArray[7] = 128;
            let bitArray[8] = 256;
            let bitArray[9] = 512;
            let bitArray[10] = 1024;
            let bitArray[11] = 2048;
            let bitArray[12] = 4096;
            let bitArray[13] = 8192;
            let bitArray[14] = 16384;
            let bitArray[15] = 16384 + 16384;
            return;
        }






        /** Returns the absolute value of x. */
        function int abs(int x) {
        if (x>0) {
            return x;
        }
        return -x;
        }





         function boolean bit(int x, int index){
            return ~((x & bitArray[index]) = 0);
        }

        /**
         * Returns the product of x and y.
         * When a Jack compiler detects the multiplication operator '*' in the
         * program's code, it handles it by invoking this method. In other words,
         * the Jack expressions x*y and multiply(x,y) return the same value.
         */
        function int multiply(int x, int y) {
            // Pseudocode:
            // 1. let sum = 0
            // 2. let shiftedx = x
            // 3. for i = 0 ... n-1 do
            // 4.   if ((i-th bit of y) == 1)
            // 5.      let sum = sum + shiftedx
            // 6.   let shiftedx = 2*shiftedx
            // 7. return sum
            var int index, shift, sum;
            let index = 0;
            let shift = x;
            let sum = 0;
            while(index < 16) {
                if(Math.bit(y, index)) {
                    let sum = sum + shift;
                }
                let shift = shift + shift;
                let index = index + 1;
            }
            return sum;
        }






        function int divideHelper(int absx, int absy){
            var int q;
            if((absx < absy) | (absy < 0)){
                return 0;
            }
            let q = Math.divideHelper(absx, absy + absy);
            if((absx - (2 * q * absy)) < absy){
                return (q + q);
            }
            else{
                return (q + q + 1);
            }
        }

        /**
         * Returns the integer part of x/y.
         * When a Jack compiler detects the multiplication operator '/' in the
         * program's code, it handles it by invoking this method. In other words,
         * the Jack expressions x/y and divide(x,y) return the same value.
         */
        function int divide(int x, int y) {
            // This should be implemented without using multiplication.
            // Hint: updating the value of 2*q*y in the "if" statement requires
            // at most a single addition operator at every recursion step.
            // Pseudocode:
            // 1. if (y > x) return 0
            // 2. let q = divide(x, 2*y)
            // 3. if ((x - 2*q*y) < y)
            // 4.   return 2*q
            // 5. else
            // 6.   return 2*q + 1
            var int q, absx, absy;
            var boolean signX, signY;
            let signX = x < 0;
            let signY = y < 0;

            let absx = Math.abs(x);
            let absy = Math.abs(y);
            let q = Math.divideHelper(absx, absy);
            if(signX = signY){
                return q;
            }
            return -q;
        }



        /** Returns the integer part of the square root of x.*/
        function int sqrt(int x) {
            var int runner, y;
            var int approxSqrt;
            var int approxPow;
            let y = 0;
            let runner = 7;  //n/2 - 1
            while( ~(runner < 0) ) {
                let approxSqrt = y + bitArray[runner];
                let approxPow = approxSqrt * approxSqrt;
                if( ~(approxPow > x) & (approxPow > 0)){    // in case of overflow
                    let y = approxSqrt;
                }
                let runner = runner - 1;
            }
            return y;
    }



        /** Returns the greater number. */
        function int max(int a, int b) {
            var int return_value;
            if (a > b) {
                let return_value = a;
            } else {
                let return_value = b;
            }
            return return_value;
        }

        /** Returns the smaller number. */
        function int min(int a, int b) {
            var int return_value;
            if (a < b) {
                let return_value = a;
            } else {
                let return_value = b;
            }
            return return_value;
        }


        function int powTwo(int index){
            return bitArray[index];
        }

}
